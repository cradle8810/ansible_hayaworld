---
- name: "Corosync / Install corosync"
  ansible.builtin.apt:
    pkg:
      - corosync
      - pacemaker
      - pcs
    state: present
    update_cache: true
  notify:
    - "Restart corosync"
    - "Restart pacemaker"

- name: "Corosync / Set pcs command user"
  ansible.builtin.user:
    group: "haclient"
    name: "hacluster"
    password: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          33383531376263316530333634643938393830656661366362653831666465326432323361356366
          6335653964396538326464353364633665373731653761380a363662643866323432613139633036
          38633865633031396132636134343035393230356664336632326133396131616164616237643765
          6535646333343830650a303634623761613362663565343463643662613164633937346565633637
          30353037353937616436366238353166393035623833613961633166613133653934353431386339
          34303865393534313464616137343331343039306366333663613763383762363135623730396439
          63333462323930306338646334383736363535376162663663393732346465376538363462333436
          66623732313634366439656534666633663336303034636134316537306638373866343061313939
          65303331346233666438333330393963306166323237393635316539633266373564
    state: "present"
  notify:
    - "Restart corosync"
    - "Restart pacemaker"

- name: "Corosync / Check Corosync Cluster built"
  ansible.builtin.stat:
    path: "/etc/corosync/ansible_configured"
  register: configured

- name: "Corosync / Cluster Initialize"
  when: not configured.stat.exists
  notify:
    - "Restart corosync"
    - "Restart pacemaker"
  block:
    - name: "Corosync / Put Cluster authkey"
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: root
        group: root
        mode: '0400'
      loop:
        - src: templates/etc/corosync/authkey
          dest: /etc/corosync/authkey
        - src: templates/etc/pacemaker/authkey
          dest: /etc/pacemaker/authkey

    - name: "Corosync / Put corosync.conf"
      ansible.builtin.template:
        src: templates/etc/corosync/corosync.conf.j2
        dest: /etc/corosync/corosync.conf
        owner: root
        group: root
        mode: '0644'

    - name: "Corosync / Cluster Auth"
      become: true
      ansible.builtin.command:
        cmd: "pcs host auth {{ corosync.me }} {{ corosync.other }} -u {{ corosync.user }} -p {{ corosync.passwd }}"
      register: retval
      changed_when: retval.rc == 0

    - name: "Corosync / Start and enable services"
      ansible.builtin.systemd_service:
        name: "{{ item }}"
        state: restarted
        enabled: true
      loop:
        - corosync
        - pacemaker

    - name: "Corosync / Cluster Qurum disable"
      become: true
      ansible.builtin.shell:
        cmd: |
          pcs property set stonith-enabled=false
      register: retval
      changed_when: retval.rc == 0

    - name: "Corosync / Mark Cluster Configured"
      ansible.builtin.file:
        path: "/etc/corosync/ansible_configured"
        state: touch
        owner: root
        group: root
        mode: '0644'

- name: "RAdvd resource configurations"
  block:
    - name: "Is radvd resource configured?"
      become: true
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          pcs resource | grep 'radvd'
        executable: /bin/bash
      register: is_radvd_configured
      changed_when: is_radvd_configured.rc != 0
  rescue:
    - name: "Add resource configurations"
      become: true
      ansible.builtin.shell:
        cmd: |
          pcs resource create radvd systemd:radvd op monitor interval=10s
      when:
        - is_radvd_configured.rc != 0
        - common_hostinfo.ipv4 == dns_cluster_01_ipv4
      register: retval
      changed_when: retval.rc == 0
